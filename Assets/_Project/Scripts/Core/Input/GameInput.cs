//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
namespace Game.Core.Input {


	public partial class @GameInput : IInputActionCollection2, IDisposable {
		public InputActionAsset asset { get; }
		public @GameInput() {
			asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""7030914e-225b-451d-bcba-514779afe08b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ed780a72-cdd8-488d-b0f9-f19618c49a31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""cd2e2f63-e5e0-4a18-b5fc-a3e31decb939"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ae7bb630-982f-4c2b-a34b-fa8e542c2014"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0be8ef3f-3e22-4aa9-9a2d-8033c033976a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dcb0d666-31c8-493b-a048-080078d7bcbe"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d0cb7d6d-1fb1-46ec-8fe0-564f6a84935f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
			// Gameplay
			m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
			m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
		}

		public void Dispose() {
			UnityEngine.Object.Destroy(asset);
		}

		public InputBinding? bindingMask {
			get => asset.bindingMask;
			set => asset.bindingMask = value;
		}

		public ReadOnlyArray<InputDevice>? devices {
			get => asset.devices;
			set => asset.devices = value;
		}

		public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

		public bool Contains(InputAction action) {
			return asset.Contains(action);
		}

		public IEnumerator<InputAction> GetEnumerator() {
			return asset.GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator() {
			return GetEnumerator();
		}

		public void Enable() {
			asset.Enable();
		}

		public void Disable() {
			asset.Disable();
		}

		public IEnumerable<InputBinding> bindings => asset.bindings;

		public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false) {
			return asset.FindAction(actionNameOrId, throwIfNotFound);
		}

		public int FindBinding(InputBinding bindingMask, out InputAction action) {
			return asset.FindBinding(bindingMask, out action);
		}

		// Gameplay
		private readonly InputActionMap m_Gameplay;
		private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
		private readonly InputAction m_Gameplay_Move;
		public struct GameplayActions {
			private @GameInput m_Wrapper;
			public GameplayActions(@GameInput wrapper) { m_Wrapper = wrapper; }
			public InputAction @Move => m_Wrapper.m_Gameplay_Move;
			public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
			public void Enable() { Get().Enable(); }
			public void Disable() { Get().Disable(); }
			public bool enabled => Get().enabled;
			public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
			public void AddCallbacks(IGameplayActions instance) {
				if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
				m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
				@Move.started += instance.OnMove;
				@Move.performed += instance.OnMove;
				@Move.canceled += instance.OnMove;
			}

			private void UnregisterCallbacks(IGameplayActions instance) {
				@Move.started -= instance.OnMove;
				@Move.performed -= instance.OnMove;
				@Move.canceled -= instance.OnMove;
			}

			public void RemoveCallbacks(IGameplayActions instance) {
				if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
					UnregisterCallbacks(instance);
			}

			public void SetCallbacks(IGameplayActions instance) {
				foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
					UnregisterCallbacks(item);
				m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
				AddCallbacks(instance);
			}
		}
		public GameplayActions @Gameplay => new GameplayActions(this);
		public interface IGameplayActions {
			void OnMove(InputAction.CallbackContext context);
		}
	}
}